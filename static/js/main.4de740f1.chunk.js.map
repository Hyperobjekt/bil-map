{"version":3,"sources":["CardDock.js","Legend.js","Tooltip.js","App.js","index.js"],"names":["PROPERTY_LIST","EXPANDIBLE_LIST","CardDock","props","state","minimized","expandedProperties","removeCard","bind","slideDock","minimizeDock","toggleProperty","id","this","e","deltaY","setState","property","expanded","cardData","map","experimentCardSet","key","eid","className","name","onClick","expandible","getIsExpandible","expandIcon","cellClass","valueClass","propertyCells","cellContent","getCellContent","_","some","expCardSet","length","includes","getLocationCellContent","spreadsheetProperty","split","ltr","toLowerCase","join","convertToSpreadsheetFormat","locationOneData","otherLocationsData","firstValue","every","l","locationData","location","title","classes","cardCount","String","onWheel","onDoubleClick","getNames","getRows","React","PureComponent","Legend","toggleExpand","Component","Tooltip","left","top","adjusted","ref","createRef","nextProps","expId","x","y","adjustPosition","current","getBoundingClientRect","tooltipWidth","width","tooltipHeight","height","document","getElementById","windowWidth","windowHeight","POINT_BUFFER","otherLocations","hoveredClass","otherLocationElements","style","visibility","getLocations","mapboxgl","accessToken","process","load","prototype","startsWith","Object","defineProperty","value","search","rawPos","pos","substring","experimentsData","type","features","experimentsReq","XMLHttpRequest","addEventListener","source","req","rows","JSON","parse","responseText","feed","entry","properties","keys","filter","p","endsWith","substr","items","r","ri","row","forEach","$t","indexOf","geometry","coordinates","longitude","latitude","getSource","setData","reqHandler","open","send","App","lat","lng","zoom","hovered","selectedIds","getCardDock","getTooltip","getFeaturesByExperimentId","Map","container","mapContainer","styleData","center","on","featuresOnUnhover","getCenter","toFixed","getZoom","featuresOnClick","featuresOnHover","call","_data","f","idx","alreadySelected","splice","console","log","push","setFeatureState","selected","getCanvas","cursor","point","hover","el","ReactDOM","render"],"mappings":"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","file":"static/js/main.4de740f1.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nconst PROPERTY_LIST = [\n  'Implementation Dates',\n  'Location',\n  'Number of Recipients',\n  'Implementing Agency',\n  'Research Agency',\n  'Funding Agency',\n  'Type of Targeting',\n  'Unit of Recipient',\n  'Amount of Transfer',\n  'Frequency of Payment',\n  'Method of Evaluation',\n  'Additional Notes of Interest',\n  'Link to Website',\n  'Links to Related Resources'\n];\n\nconst EXPANDIBLE_LIST = [\n  'Location',\n  'Number of Recipients',\n  'Implementing Agency',\n  'Research Agency',\n  'Funding Agency',\n  'Type of Targeting',\n  'Amount of Transfer',\n  'Additional Notes of Interest',\n  'Link to Website',\n  'Links to Related Resources'\n];\n\nconst FORCE_UNIFORM_VALUE = [];\n\n// TODO: make more robust (stab)\nconst convertToSpreadsheetFormat = property => {\n  return property.split('').map(ltr => {\n    if (ltr === ' ') {\n      return '';\n    } else {\n      return ltr.toLowerCase();\n    }\n  }).join('');\n}\n\n// pure component? (shallow compare map features?) (perf)\nclass CardDock extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = { minimized: true, expandedProperties: {} };\n\n    this.removeCard = this.removeCard.bind(this);\n    this.slideDock = this.slideDock.bind(this);\n    this.minimizeDock = this.minimizeDock.bind(this);\n    this.toggleProperty = this.toggleProperty.bind(this);\n  }\n\n  removeCard(id) {\n    this.props.removeCard(id);\n  }\n\n  slideDock(e) {\n    if (e.deltaY && e.deltaY > 0) {\n      this.setState({ minimized: false });\n    }\n  }\n\n  minimizeDock() {\n    // TODO: call toggle? or remove, make only scroll-controlled\n    this.setState(state => ({ minimized: !this.state.minimized }));\n  }\n\n  toggleProperty(property, expanded) {\n    const expandedProperties = {...this.state.expandedProperties};\n    expandedProperties[property] = !expanded;\n    this.setState({ expandedProperties });\n  }\n\n  getNames() {\n    // TODO: don't bind in render (perf)\n    return this.props.cardData.map(experimentCardSet => (\n      <td key={'name'+experimentCardSet[0].eid} className='name'>\n        {experimentCardSet[0].name||'(none)'}\n        <p onClick={this.removeCard.bind(this, experimentCardSet[0].eid)} className='remove'>✕</p>\n      </td>\n    ));\n  }\n\n  getRows() {\n    return PROPERTY_LIST.map(property => {\n      const expandible = this.getIsExpandible(property);\n      // const expandible = true;\n      const expanded = !!this.state.expandedProperties[property];\n\n      let expandIcon = null;\n      if (expandible) {\n        // TODO: also don't bind in render (perf)\n        expandIcon = (\n          <p\n            onClick={this.toggleProperty.bind(this, property, expanded)}\n            className='expand-icon'\n          >\n            {expanded ? '-' : '+'}\n          </p>\n        );\n      }\n\n      let cellClass = 'property-cell';\n      if (expandible) {\n        cellClass += ' expandible';\n      }\n  \n      let valueClass = 'property-value';\n      if (expanded) {\n        valueClass += ' expanded';\n      }\n\n      const propertyCells = this.props.cardData.map(experimentCardSet => {\n        \n        const cellContent = this.getCellContent(experimentCardSet, property);\n        return (\n          <td className={cellClass} key={property+'-td-'+experimentCardSet[0].eid}>\n            <div className='property-name'>{property}{expandIcon}</div>\n            <div className={valueClass}>{cellContent}</div>\n          </td>\n      )});\n      return <tr className='property-row' key={property}>{propertyCells}</tr>;\n    });\n  }\n\n  getIsExpandible(property) {\n    if (property === 'Location') {\n      // if any experimint in the card dock has multiple locations, the cell should be expandible\n      return _.some(this.props.cardData, expCardSet => expCardSet.length > 1);\n    }\n    return EXPANDIBLE_LIST.includes(property);\n  }\n\n  getCellContent(experimentCardSet, property) {\n    if (property === 'Location') {\n      return this.getLocationCellContent(experimentCardSet);\n    }\n\n    const spreadsheetProperty = convertToSpreadsheetFormat(property);\n\n    const [locationOneData, ...otherLocationsData] = experimentCardSet;\n    const firstValue = locationOneData[spreadsheetProperty];\n    const uniformValue = _.every(otherLocationsData, l => l[spreadsheetProperty] === firstValue);\n    \n    let cellContent;\n    if (uniformValue) {\n      cellContent = firstValue;\n    } else {\n      // break cell into block for each location, as they have different values\n      cellContent = experimentCardSet.map(locationData => {\n        return (\n          <div key={`cell-content-${spreadsheetProperty}-${locationData.eid}-${locationData.location}`}>\n            <div \n              title={locationData.location}\n              className='property-location-title'\n            >\n              {locationData.location}\n            </div>\n            {locationData[spreadsheetProperty]}\n          </div>\n        )\n      })\n    }\n\n    return <>{cellContent}</>;\n  }\n\n  getLocationCellContent(experimentCardSet) {\n    const cellContent = experimentCardSet.map(locationData => (\n      <div \n        title={locationData.location}\n        className='location-cell-content'\n        key={`cell-content-location-${locationData.eid}-${locationData.location}`}\n      >\n        {locationData.location}\n      </div>\n    ))\n    return <>{cellContent}</>;\n  }\n    \n  render() {\n    let classes = 'card-dock';\n    const cardCount = String(this.props.cardData.length);\n    classes += ` card-count-${cardCount}`;\n    if (!this.state.minimized) {\n      classes += ' maximized';\n    }\n\n    return (\n      <div onWheel={this.slideDock} onDoubleClick={this.minimizeDock}>\n        <table className={classes}>\n          <thead>\n            <tr>{this.getNames()}</tr>\n          </thead>\n          <tbody>\n            {this.getRows()}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default CardDock;\n","import React from 'react';\n\nclass Legend extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { expanded: true };\n\n    this.toggleExpand = this.toggleExpand.bind(this);\n  }\n\n  toggleExpand() {\n    this.setState(state => ({ expanded: !state.expanded }));\n  }\n\n  render() {\n    let classes = 'legend';\n    if (!this.state.expanded) {\n      classes += ' hidden';\n    }\n    return (\n      <div className={classes}>\n          <p onClick={this.toggleExpand} className='expand-icon'>[{this.state.expanded ? '-' : '+'}]</p>\n          <div className='content'>\n            <div><i className='past' />Past Experiments</div>\n            <div><i className='ongoing' />Ongoing Experiments</div>\n            <div><i className='proposed' />Proposed Experiments</div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default Legend;\n","import React from 'react';\n\nconst TOOLTIP_DIMENSIONS = { width: 200, height: 175 };\nconst POINT_BUFFER = 7;\n\nclass Tooltip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      left: 0,\n      top: 0,\n      adjusted: false\n    };\n\n    this.ref = React.createRef();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { expId } = nextProps;\n    if (this.props.expId === expId || !expId) {\n      // if we're still hovering the same point, don't worry about updating\n      return;\n    }\n\n    // The following steps insure a tooltip doesn't flow outside of the window bounds:\n    // 1] when we hover a new point, we initially render without adjusting the tooltip location\n    this.setState({ \n      adjusted: false,\n      left: nextProps.x,\n      top: nextProps.y\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.state.adjusted || !this.props.expId) {\n      // 6] location has already been adjusted, so don't trigger a rerender\n      return;\n    }\n\n    this.adjustPosition();\n  }\n\n  adjustPosition() {\n    // 3] after the initial render, we have access to the tooltip's DOM node and can tell it's size\n    const { width: tooltipWidth, height: tooltipHeight } = this.ref.current.getBoundingClientRect();\n    const windowElement = document.getElementById('root');\n    const { width: windowWidth, height: windowHeight } = windowElement.getBoundingClientRect();\n    \n    let { left, top } = this.state;\n    // by default, tooltip appears above the point\n    top -= (tooltipHeight + POINT_BUFFER);\n    if (top < 0) {\n      // if it would run off the top of the screen, shift it below the point\n      top += tooltipHeight + POINT_BUFFER*2;\n\n      if ((top + tooltipHeight) > windowHeight) {\n        // ...unless it would then run off the bottom, in which case set it as high as possible\n        top = 1;\n      }\n    }\n\n    left += POINT_BUFFER;\n    if (left + tooltipWidth > windowWidth) {\n      // if the tooltip would run off the right of the screen, shift it left of the point\n      left -= (tooltipWidth + POINT_BUFFER*2);\n\n      if (left < 0) {\n        // ...unless it would then run off the left, in which case set it up against the right border\n        left = windowWidth - (tooltipWidth + 2);\n      }\n    }\n\n    // 4] record our adjusted coordinates, which will trigger a rerender\n    this.setState({ left, top, adjusted: true });\n  }\n  \n  getLocations() {\n    const { location, otherLocations } = this.props;\n    let hoveredClass = 'hovered-location';\n    let otherLocationElements = null;\n\n    if (otherLocations.length) {\n      hoveredClass += ' emphasized';\n      otherLocationElements = otherLocations.map(l => <p key={l}>{l}</p>);\n    }\n\n    return (\n      <>\n        <p className={hoveredClass}>{location}</p>\n        {otherLocationElements}\n      </>\n    )\n  }\n\n  render() {\n    const { expId, name } = this.props;\n    if (!expId) {\n      return null;\n    }\n\n    let style = {};\n    if (!this.state.adjusted) {\n      // 2] hide this initial render so user doesn't see tooltip \"jump\"\n      style = { visibility: 'hidden', left: '0px', top: '0px' };\n    } else {\n      // 5] finally, our tooltip can be told where to properly render\n      style = { left: this.state.left + 'px', top: this.state.top + 'px' };\n    }\n\n    return (\n      <div className='tooltip' style={style} ref={this.ref}>\n        <div className='name'>{name||'(none)'}</div>\n        <div className='detail'>\n          <p className='location-title'>Location:</p>\n          {this.getLocations()}\n        </div>\n        <p className='click-hint'>click point for more info</p>\n      </div>\n    )\n  }\n}\n\nexport default Tooltip;\n","import CardDock from './CardDock';\nimport Legend from './Legend';\nimport React from 'react';\nimport Tooltip from './Tooltip';\nimport mapboxgl from 'mapbox-gl';\nimport _ from 'lodash';\nimport styleData from './style.json';\nimport './App.css';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nconst MAX_SELECTED_POINTS = 3;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 40.66995747013945,\n      lng: -103.59179687498357,\n      zoom: 3,\n      hovered: {},\n      selectedIds: []\n    };\n\n    this.map = null;\n    this.getCardDock = this.getCardDock.bind(this);\n    this.getTooltip = this.getTooltip.bind(this);\n    this.removeCard = this.removeCard.bind(this);\n    this.getFeaturesByExperimentId = this.getFeaturesByExperimentId.bind(this);\n  }\n\n  componentDidMount() {\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: styleData,\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n    });\n    \n    this.map.on('move', () => {\n      this.featuresOnUnhover();\n      this.setState({\n        lng: this.map.getCenter().lng.toFixed(4),\n        lat: this.map.getCenter().lat.toFixed(4),\n        zoom: this.map.getZoom().toFixed(2)\n      });\n    });\n    \n    this.map.on('click', 'experimentSites', this.featuresOnClick.bind(this));\n    this.map.on('mouseenter', 'experimentSites', this.featuresOnHover.bind(this));\n    this.map.on('mouseleave', 'experimentSites', this.featuresOnUnhover.bind(this));\n    \n    load.call(this); \n  }\n  \n  getFeaturesByExperimentId(expId) {\n    const { features } = this.map.getSource('experiments')._data;\n    return features.filter(f => f.id === expId).map(f => f.properties);\n  }\n  \n  featuresOnClick(e) {\n    const { id: expId } = e.features[0];\n    const selectedIds = [...this.state.selectedIds];\n    const idx = selectedIds.indexOf(expId);\n    const alreadySelected = idx > -1;\n\n    if (!alreadySelected) {\n      if (selectedIds.length >= MAX_SELECTED_POINTS) {\n        console.log('OH SHET!');\n        // warn user\n        return;\n      } else {\n        selectedIds.push(expId);\n      }\n    } else {\n      selectedIds.splice(idx, 1);\n    }\n\n    this.setState({ selectedIds });\n    this.map.setFeatureState({\n        source: 'experiments',\n        id: expId\n      }, { selected: !alreadySelected }\n    );\n  }\n\n  featuresOnHover(e) {\n    this.map.getCanvas().style.cursor = 'pointer';\n    const { id: expId, properties } = e.features[0];    \n    const { name, location } = properties;\n    const { x, y } = e.point;\n\n    this.setState({ hovered: { expId, name, location, x, y } });\n    this.map.setFeatureState({\n        source: 'experiments',\n        id: expId\n      }, { hover: true }\n    );\n  }\n\n  featuresOnUnhover() {\n    if (!this.state.hovered.expId) {\n      return;\n    }\n    this.map.getCanvas().style.cursor = '';\n    this.map.setFeatureState({\n        source: 'experiments',\n        id: this.state.hovered.expId\n      }, { hover: false }\n    );\n\n    this.setState({ hovered: {} });\n  }\n\n  removeCard(expId) {\n    const selectedIds = [...this.state.selectedIds];\n    const idx = selectedIds.indexOf(expId);\n    selectedIds.splice(idx, 1);\n\n    this.setState({ selectedIds });\n    this.map.setFeatureState({\n        source: 'experiments',\n        id: expId\n      }, { selected: false }\n    );\n  }\n\n  getTooltip() {\n    const { expId, name, location, x, y } = this.state.hovered;\n    let otherLocations = [];\n    if (expId) {\n      const features = this.getFeaturesByExperimentId(expId);\n      otherLocations = features\n        .map(f => f.location)\n        .filter(l => l !== location);\n    }\n    return <Tooltip expId={expId} name={name} location={location} otherLocations={otherLocations} x={x} y={y}/>;\n  }\n\n  getCardDock() {\n    if (!this.map || !this.state.selectedIds.length) {\n      return null;\n    }\n\n    const cardData = this.state.selectedIds.map(this.getFeaturesByExperimentId);\n    return <CardDock removeCard={this.removeCard} cardData={cardData} />\n  }\n  \n  render() {\n    return (\n      <div className='app'>\n        {this.getCardDock()}\n        {this.getTooltip()}\n        <div ref={el => this.mapContainer = el} className='map-container' />\n        <Legend />\n      </div>\n    )\n  }\n}\n\nfunction load () {\n  // startsWith polyfill\n  if (!String.prototype.startsWith) {\n    Object.defineProperty(String.prototype, 'startsWith', {\n        value: function(search, rawPos) {\n            var pos = rawPos > 0 ? rawPos|0 : 0;\n            return this.substring(pos, pos + search.length) === search;\n        }\n    });\n  }\n\n  var experimentsData = { type: 'FeatureCollection', features: [] };\n\n  const reqHandler = (source, req) => {\n    var rows = JSON.parse(req.responseText).feed.entry;\n    var properties = Object.keys(rows[0])\n      .filter(function (p) { \n        return p.startsWith('gsx$') & !p.endsWith('_db1zf');\n      })\n      .map(function (p) { return p.substr(4); });\n    \n    var items = rows.map(function (r, ri) {\n      var row = {};\n      properties.forEach(function (p) {\n        row[p] = r['gsx$' + p].$t === '' ? null : r['gsx$' + p].$t;\n        // mapbox wants numeric lat/long, and coerces id to num (so avoid type error headache)\n        if (['latitude', 'longitude', 'eid', 'uid'].indexOf(p) !== -1) {\n          row[p] = +row[p];\n        }\n        if (row[p] === null) {\n          row[p] = '';\n        }\n      });\n      return {\n        type: 'Feature',\n        id: row.eid,\n        geometry: {\n          type: 'Point',\n          coordinates: [row.longitude, row.latitude]\n        },\n        properties: row\n      };\n    });\n\n    experimentsData = { type: 'FeatureCollection', features: items };\n    this.map.getSource('experiments').setData(experimentsData);\n  }\n\n  // Fetch Local Article Data\n  var experimentsReq = new XMLHttpRequest();\n  experimentsReq.addEventListener('load',  () => { reqHandler('experiments', experimentsReq) });\n  experimentsReq.open('GET', process.env.REACT_APP_SHEET_URL);\n  experimentsReq.send();\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}